#lang racket

(define l '(10 6 12 + - ))

;following function adapted from http://stackoverflow.com/questions/29244677/implementation-of-lifo-list-in-scheme
; so this is the stack function with 3 options
(define (make-stack)
  (let ((stack '())) ; maintain the stack with this varible
    (lambda (msg . args)
      (cond
        
        [(eq? msg 'pop)  (let ((head (car stack))) (set! stack (cdr stack)) head)] ; this is the pop method
        [(eq? msg 'push) (set! stack (append (reverse args) stack))] ; this is the push method
        [(eq? msg 'stack) stack] ; this just returns the stack as it is
        [else "Not valid code"]))))

(define (exp op l)
   (op (car l) (cadr l)))

; adpated from https://github.com/paopao2/Algorithm-Practice/blob/master/Evaluate%20Reverse%20Polish%20Notation.java
(define (evalrpn l stack) ; this is a recursive loop through the input l
 (cond ((null? l)
      (stack 'stack))
      ((if (number? (car l)) ; if the next item in the list is a number
          (stack 'push (car l)) ; push that number onto the stack
          (if (symbol=? '+ (car l))
              (stack 'push (+(stack 'pop) (stack 'pop)))
              '())) ; push the result of pop stack - pop stack back onto the stack
      (evalrpn (cdr l) stack)))) ;  back into the loop

(define s (make-stack))
(evalrpn l s)


    